name: Java CI with Gradle
on:
  push:
    branches: [ master ]        # 메인브랜치에 푸쉬가 되면

jobs:
  build:                    
    runs-on: ubuntu-latest    # 우분투 최신버전으로 진행 할게요
    env :
      working-directory: ./
      APPLICATION: ${{ secrets.APPLICATION }}
      
    steps:                    # 순서대로 실행하겠습니다
    
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
             ~/.gradle/caches
             ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
              ${{ runner.os }}-gradle-
              
    - name: make application.yml
      if: |
        contains(github.ref, 'main') ||
        contains(github.ref, 'develop')
      run: |
        mkdir ./src/main/resources # resources 폴더 생성
        cd ./src/main/resources # resources 폴더로 이동
        touch ./application.yml # application.yml 생성
        echo "${{ env.APPLICATION }}" > ./application.yml # github actions에서 설정한 값을 application.yml 파일에 쓰기
      shell: bash
          
          
    - name: gradlew 실행권한 주기
      run: chmod +x gradlew


    - name: 스프링부트 애플리케이션 빌드 
      run: ./gradlew clean build 

    - name: 도커 이미지 빌드 
      run: docker build -t ${{ secrets.DOCKER_HUB_REPO }} .

    - name: Docker Hub 로그인 
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker Hub 퍼블리시 
      run: docker push ${{ secrets.DOCKER_HUB_REPO }}

    - name: WAS 인스턴스 접속 및 애플리케이션 실행 
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          docker stop ${{ secrets.CONTAINER_NAME }}
          docker rm ${{ secrets.CONTAINER_NAME }}
          docker image rm $(docker images -q)
          docker pull ${{ secrets.DOCKER_HUB_REPO }}
          docker run -d --name ${{ secrets.CONTAINER_NAME }} -p 8080:8080 ${{ secrets.DOCKER_HUB_REPO }}
